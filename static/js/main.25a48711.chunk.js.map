{"version":3,"sources":["utility/applyTransform.ts","App.tsx","index.tsx"],"names":["applyTransform","document","transform","parser","DOMParser","xsltProcessor","XSLTProcessor","documentSource","parseFromString","transformSource","importStylesheet","resultDocument","transformToDocument","XMLSerializer","serializeToString","documentElement","format","require","useStyles","makeStyles","column","flex","inputSpacing","height","App","useState","setDocument","setTransform","transformed","setTransformed","useEffect","handleReadingFile","e","stateUpdate","file","target","files","reader","FileReader","onload","formattedXml","result","readAsText","style","Grid","container","direction","spacing","item","xs","Card","className","Typography","variant","Divider","type","id","onInput","whiteSpace","ReactDOM","render","StrictMode","getElementById"],"mappings":"yQAAMA,G,MAAiB,SAACC,EAAkBC,GACxC,IAAMC,EAAS,IAAIC,UACbC,EAAgB,IAAIC,cACpBC,EAAiBJ,EAAOK,gBAAgBP,EAAoB,YAC5DQ,EAAkBN,EAAOK,gBAC7BN,EACA,YAGF,IACEG,EAAcK,iBAAiBD,GAC/B,IAAME,EAAiBN,EAAcO,oBAAoBL,GAIzD,OADmB,IAAIM,eACLC,kBAAkBH,EAAeI,iBACnD,SACA,MAAO,4B,OCbLC,EAASC,EAAQ,IA6BjBC,EAAYC,YAAW,CAC3BC,OAAQ,CACNC,KAAM,GAERC,aAAc,CACZC,OAAQ,UAmFGC,MA/Ef,WAAgB,IAAD,EACmBC,mBAC9BT,EAtCiB,qQAoCN,mBACNf,EADM,KACIyB,EADJ,OAIqBD,mBA7Bd,uaAyBP,mBAINvB,EAJM,KAIKyB,EAJL,OAMyBF,mBACpCzB,EAAeC,EAAUC,IAPd,mBAMN0B,EANM,KAMOC,EANP,KAUbC,qBAAU,WACRD,EAAe7B,EAAeC,EAAUC,MACvC,CAACD,EAAUC,IAEd,IAAM6B,EAAoB,SACxBC,EACAC,GAEA,IAAMC,EAAaF,EAAEG,OAAOC,MAAM,GAC5BC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACP,GACf,GAAIA,EAAEG,OACJ,IACE,IAAMK,EAAexB,EAAOgB,EAAEG,OAAOM,QACrCR,EAAYO,GACZ,SACAP,EAAY,iCAIlBI,EAAOK,WAAWR,IAGdS,EAAQzB,IACd,OACE,eAAC0B,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,QAAS,EAAzC,UACE,cAACH,EAAA,EAAD,CAAMI,MAAI,EAACH,WAAS,EAACF,MAAO,CAAEpB,OAAQ,SAAW0B,GAAI,EAArD,SACE,eAACC,EAAA,EAAD,CAAMC,UAAWR,EAAMvB,OAAvB,UACE,cAACgC,EAAA,EAAD,CAAYC,QAAQ,KAApB,0BACA,cAACC,EAAA,EAAD,IACA,uBACEC,KAAK,OACLC,GAAG,iBACHC,QAAS,SAACzB,GACRD,EAAkBC,EAAGN,MAGzB,cAAC4B,EAAA,EAAD,IACA,qBAAKX,MAAO,CAAEe,WAAY,YAA1B,SAAyCzD,SAI7C,cAAC2C,EAAA,EAAD,CAAMI,MAAI,EAACH,WAAS,EAACF,MAAO,CAAEpB,OAAQ,SAAW0B,GAAI,EAArD,SACE,eAACC,EAAA,EAAD,CAAMC,UAAWR,EAAMvB,OAAvB,UACE,cAACgC,EAAA,EAAD,CAAYC,QAAQ,KAApB,4BACA,cAACC,EAAA,EAAD,IACA,uBACEC,KAAK,OACLC,GAAG,kBACHC,QAAS,SAACzB,GACRD,EAAkBC,EAAGL,MAGzB,cAAC2B,EAAA,EAAD,IACA,qBAAKX,MAAO,CAAEe,WAAY,YAA1B,SAAyCxD,SAG7C,cAAC0C,EAAA,EAAD,CAAMI,MAAI,EAACH,WAAS,EAACF,MAAO,CAAEpB,OAAQ,SAAW0B,GAAI,EAArD,SACE,eAACC,EAAA,EAAD,CAAMC,UAAWR,EAAMvB,OAAvB,UACE,cAACgC,EAAA,EAAD,CAAYC,QAAQ,KAApB,4BACA,cAACC,EAAA,EAAD,IACA,qBAAKH,UAAWR,EAAMrB,eACtB,qBAAKqB,MAAO,CAAEe,WAAY,YAA1B,SAAyC9B,aC5GnD+B,IAASC,OAGP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5D,SAAS6D,eAAe,W","file":"static/js/main.25a48711.chunk.js","sourcesContent":["const applyTransform = (document: string, transform: string) => {\n  const parser = new DOMParser();\n  const xsltProcessor = new XSLTProcessor();\n  const documentSource = parser.parseFromString(document as string, \"text/xml\");\n  const transformSource = parser.parseFromString(\n    transform as string,\n    \"text/xml\"\n  );\n\n  try {\n    xsltProcessor.importStylesheet(transformSource);\n    const resultDocument = xsltProcessor.transformToDocument(documentSource);\n\n    // Obtain result as a string\n    const serializer = new XMLSerializer();\n    return serializer.serializeToString(resultDocument.documentElement);\n  } catch {\n    return \"Invalid XSLT provided.\";\n  }\n};\n\nexport { applyTransform };\n","import { Card, Divider, Grid, makeStyles, Typography } from \"@material-ui/core\";\nimport { Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { applyTransform } from \"./utility/applyTransform\";\nconst format = require(\"xml-formatter\");\n\nconst defaultDocument = `<?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"example.xsl\"?>\n<Article>\n  <Title>My Article</Title>\n  <Authors>\n    <Author>Mr. Foo</Author>\n    <Author>Mr. Bar</Author>\n  </Authors>\n  <Body>This is my article text.</Body>\n</Article>`;\n\nconst defaultTransform = `<?xml version=\"1.0\"?>\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n\n  <xsl:output method=\"text\"/>\n\n  <xsl:template match=\"/\">\n    Article - <xsl:value-of select=\"/Article/Title\"/>\n    Authors: <xsl:apply-templates select=\"/Article/Authors/Author\"/>\n  </xsl:template>\n\n  <xsl:template match=\"Author\">\n    - <xsl:value-of select=\".\" />\n  </xsl:template>\n\n</xsl:stylesheet>`;\n\nconst useStyles = makeStyles({\n  column: {\n    flex: 1,\n  },\n  inputSpacing: {\n    height: \"22px\",\n  },\n});\n\nfunction App() {\n  const [document, setDocument] = useState(\n    format(defaultDocument as string) as string\n  );\n  const [transform, setTransform] = useState(defaultTransform);\n\n  const [transformed, setTransformed] = useState(\n    applyTransform(document, transform)\n  );\n\n  useEffect(() => {\n    setTransformed(applyTransform(document, transform));\n  }, [document, transform]);\n\n  const handleReadingFile = (\n    e: any,\n    stateUpdate: Dispatch<SetStateAction<string>>\n  ) => {\n    const file: File = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      if (e.target) {\n        try {\n          const formattedXml = format(e.target.result as string);\n          stateUpdate(formattedXml);\n        } catch {\n          stateUpdate(\"Invalid XSLT file provided.\");\n        }\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  const style = useStyles();\n  return (\n    <Grid container direction=\"row\" spacing={2}>\n      <Grid item container style={{ height: \"100vh\" }} xs={4}>\n        <Card className={style.column}>\n          <Typography variant=\"h3\">XML Document</Typography>\n          <Divider />\n          <input\n            type=\"file\"\n            id=\"document-input\"\n            onInput={(e) => {\n              handleReadingFile(e, setDocument);\n            }}\n          />\n          <Divider />\n          <div style={{ whiteSpace: \"pre-wrap\" }}>{document}</div>\n        </Card>\n      </Grid>\n\n      <Grid item container style={{ height: \"100vh\" }} xs={4}>\n        <Card className={style.column}>\n          <Typography variant=\"h3\">XSLT Transform</Typography>\n          <Divider />\n          <input\n            type=\"file\"\n            id=\"transform-input\"\n            onInput={(e) => {\n              handleReadingFile(e, setTransform);\n            }}\n          />\n          <Divider />\n          <div style={{ whiteSpace: \"pre-wrap\" }}>{transform}</div>\n        </Card>\n      </Grid>\n      <Grid item container style={{ height: \"100vh\" }} xs={4}>\n        <Card className={style.column}>\n          <Typography variant=\"h3\">Transformation</Typography>\n          <Divider />\n          <div className={style.inputSpacing} />\n          <div style={{ whiteSpace: \"pre-wrap\" }}>{transformed}</div>\n        </Card>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  // <div>dog</div>,\n\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}